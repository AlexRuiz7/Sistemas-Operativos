
Orden open -> abre o crea(si no existe) un archivo o dispositivo


Devuelve el fd o -1 si hay error

int open(archivo, flags, mode)
int open(archivo, flags)
int open(archivo, mode)

creat() == open() with flags equal to O_CREAT|O_WRONLY|O_TRUNC.

FLAGS:
  O_CREAT -> si el archivo no existe, se crea.
  O_TRUNC -> si el archico existe y es un archivo regular, permite la escritura.
  O_WRONLY -> write only
  O_RDONLY -> read only

MODE:
  S_IRWXU -> 00700 user (file owner) has read, write and execute permission
  S_IRUSR -> 00400 user has read permission
  S_IWUSR -> 00200 user has write permission
  S_IXUSR -> 00100 user has execute permission
  S_IRWXG -> 00070 group has read, write and execute permission
  S_IRGRP -> 00040 group has read permission
  S_IWGRP -> 00020 group has write permission
  S_IXGRP -> 00010 group has execute permission
  S_IRWXO -> 00007 others have read, write and execute permission
  S_IROTH -> 00004 others have read permission
  S_IWOTH -> 00002 others have write permission
  S_IXOTH -> 00001 others have execute permission

--------------------------------------------------------------------------------

write(int fd, const void *buf, size_t count);

write() writes up to count bytes from the buffer pointed buf to the file
referred to by the file descriptor fd.

On success, the number of bytes written is returned (zero indicates nothing was
written). On error, -1 is returned.

--------------------------------------------------------------------------------

lseek(int fd, off_t offset, int whence);

The lseek() function repositions the offset of the open file associated with
the file descriptor fd to the argument offset according to the directive whence
as follows:

SEEK_SET -> The offset is set to offset bytes.
SEEK_CUR -> The offset is set to its current location plus offset bytes.
SEEK_END -> The offset is set to the size of the file plus offset bytes.
